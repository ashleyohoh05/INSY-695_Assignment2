import joblib
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_regression

# Create synthetic dataset (replace with your actual dataset)
X, y = make_regression(n_samples=1000, n_features=3, noise=0.1, random_state=42)

# Preprocessing: Handle missing values and scale features
imputer = SimpleImputer(strategy="mean")
scaler = StandardScaler()

X_imputed = imputer.fit_transform(X)
X_scaled = scaler.fit_transform(X_imputed)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train the Gradient Boosting Regressor
model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, max_depth=5, random_state=42)
model.fit(X_train, y_train)

# Save the preprocessing pipeline and model
pipeline = {
    "imputer": imputer,
    "scaler": scaler,
    "model": model
}
joblib.dump(pipeline, "model.pkl")
print("Model and pipeline saved to model.pkl!")
